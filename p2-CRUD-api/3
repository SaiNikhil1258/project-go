package main

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

type Movie struct {
	ID       string    `json:"id"`
	Isbn     string    `json:"isbn"`
	Title    string    `json:"title"`
	Director *Director `json:"director"`
}

type Director struct {
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
}

var movies []Movie

func getMovies(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
    err:= json.NewEncoder(w).Encode(movies)
    if err!= nil{
        http.Error(w, "Error encoding movies to JSON: "+err.Error(), http.StatusInternalServerError)
        return
    }
}

func deleteMovie(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	for index, item := range movies {
		if item.ID == params["id"] {
			movies = append(movies[:index], movies[index+1:]...)
		}
	}
    err := json.NewEncoder(w).Encode(movies)
    if err!= nil{
        http.Error(w, "Error encoding movies to JSON: "+err.Error(), http.StatusInternalServerError)
        return
    }
}

func getMovie(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	for _, item := range movies {
		if item.ID == params["id"] {
			json.NewEncoder(w).Encode(item)
			return
		}
	}
}

func createMovie(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Conteny-Type", "application/json")

	var movie Movie
	_ = json.NewDecoder(r.Body).Decode(&movie)
	movie.ID = strconv.Itoa(rand.Intn(1000000))
	movies = append(movies, movie)
	json.NewEncoder(w).Encode(movie)
}

func updateMovie(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Conteny-Type", "application/json")
	params := mux.Vars(r)

	for index, item := range movies {
		if item.ID == params["id"] {
			movies = append(movies[:index], movies[index+1:]...)
			var movie Movie
			_ = json.NewDecoder(r.Body).Decode(&movie)
			movie.ID = strconv.Itoa(rand.Intn(1000000))
			movies = append(movies, movie)
			json.NewEncoder(w).Encode(movie)
			return

		}
	}

}

func main() {

	r := mux.NewRouter()
	movies = append(movies, Movie{ID: "1", Isbn: "1234", Title: "Movie ONE", Director: &Director{Firstname: "nik", Lastname: "sai"}})
	movies = append(movies, Movie{ID: "2", Isbn: "1241", Title: "Movie TWO", Director: &Director{Firstname: "second", Lastname: "Person"}})
	movies = append(movies, Movie{ID: "3", Isbn: "1325", Title: "Movie THREE", Director: &Director{Firstname: "third", Lastname: "pperson"}})

	r.HandleFunc("/movies", getMovies).Methods("GET")
	r.HandleFunc("/movies/{id}", getMovie).Methods("GET")
	r.HandleFunc("/movies", createMovie).Methods("POST")
	r.HandleFunc("/movies/{id}", updateMovie).Methods("PUT")
	r.HandleFunc("/movies/{id}", deleteMovie).Methods("DELETE")

	fmt.Printf("Starting a serer at port 8000\n")
	log.Fatal(http.ListenAndServe(":8000", r))
}
